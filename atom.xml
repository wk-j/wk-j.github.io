<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[wk's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://wk-j.gihub.io/"/>
  <updated>2016-01-24T14:13:44.000Z</updated>
  <id>http://wk-j.gihub.io/</id>
  
  <author>
    <name><![CDATA[wk]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Fizz Buzz in F#]]></title>
    <link href="http://wk-j.gihub.io/2016/01/24/fsharp-fizz-buzz/"/>
    <id>http://wk-j.gihub.io/2016/01/24/fsharp-fizz-buzz/</id>
    <published>2016-01-24T09:46:08.000Z</published>
    <updated>2016-01-24T14:13:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Fuzz_Buzz"><a href="#Fuzz_Buzz" class="headerlink" title="Fuzz Buzz"></a>Fuzz Buzz</h2><p>Fizz Buzz เป็นโจทย์ที่นิยมใช้สำหรับ ทดสอบการเขียนโปรแกรม กฎคือ ให้เขียนโปรแกรมที่รันเลขตั้งแต่ 1 - 100 โดย</p>
<ol>
<li>ถ้าเลขนั้นหาร 3 ลงตัวให้พิมพ์ <code>Fizz</code></li>
<li>ถ้าเลขนั้นหาร 5 ลงตัวให้พิมพ์ <code>Buzz</code></li>
<li>และถ้าเลขนั้นหารทั้ง 3 และ 5 ลงตัวให้พิมพ์ <code>FizzBuzz</code></li>
</ol>
<p>ใน F# สามารถแก้ปัญหานี้ได้หลายวิธี วิธีที่ง่ายสุดคือใช้ Pattern matching อีกวิธีคือใช้ Active pattern ซึ่งจะทำให้โค้ดอ่านง่ายขึ้น ส่วนวิธีสุดท้ายที่ยากสุดคือ ใช้ Computation expression</p>
<h2 id="Pattern_matching"><a href="#Pattern_matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h2><p>Pattern matching แบบแรกคือ ใช้วิธีีคำนวณตัวเลขทีตำแหน่ง matching case โดยใช้ when guard</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fizzBuzz number =</span><br><span class="line">    <span class="keyword">match</span> number <span class="keyword">with</span></span><br><span class="line">    | n <span class="keyword">when</span> n % <span class="number">15</span> = <span class="number">0</span> -&gt; <span class="string">"FizzBuzz"</span></span><br><span class="line">    | n <span class="keyword">when</span> n % <span class="number">3</span> = <span class="number">0</span> -&gt; <span class="string">"Fizz"</span></span><br><span class="line">    | n <span class="keyword">when</span> n % <span class="number">5</span> = <span class="number">0</span> -&gt; <span class="string">"Buzz"</span></span><br><span class="line">    | n -&gt; sprintf <span class="string">"%d"</span> n</span><br><span class="line"></span><br><span class="line">[<span class="number">1.</span><span class="number">.100</span>]</span><br><span class="line">|&gt; List.map fizzBuzz</span><br><span class="line">|&gt; List.iter (printfn <span class="string">"%s"</span>)</span><br></pre></td></tr></table></figure>
<p>หรือคำนวนในประโยค <code>match ... with</code></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fizzBuzz i =</span><br><span class="line">    <span class="keyword">match</span> i % <span class="number">3</span>, i % <span class="number">5</span> <span class="keyword">with</span></span><br><span class="line">    | <span class="number">0</span>, <span class="number">0</span> -&gt; <span class="string">"FizzBuzz"</span></span><br><span class="line">    | <span class="number">0</span>, _ -&gt; <span class="string">"Fizz"</span></span><br><span class="line">    | _, <span class="number">0</span> -&gt; <span class="string">"Buzz"</span></span><br><span class="line">    | _ -&gt; string i</span><br><span class="line">[<span class="number">1.</span><span class="number">.100</span>] |&gt; Seq.map fizzBuzz0 |&gt; Seq.iter (printfn <span class="string">"%s"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Partial_active_pattern"><a href="#Partial_active_pattern" class="headerlink" title="Partial active pattern."></a>Partial active pattern.</h2><p>ใช้ Partial active pattern สองตัว คือ <code>P3</code> และ <code>P5</code></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (|P3|_|) i = <span class="keyword">if</span> i % <span class="number">3</span> = <span class="number">0</span> <span class="keyword">then</span> Some i <span class="keyword">else</span> None</span><br><span class="line"><span class="keyword">let</span> (|P5|_|) i = <span class="keyword">if</span> i % <span class="number">5</span> = <span class="number">0</span> <span class="keyword">then</span> Some i <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span></span><br><span class="line">  | P3 _ &amp; P5 _ -&gt; printfn <span class="string">"FizzBuzz"</span></span><br><span class="line">  | P3 _        -&gt; printfn <span class="string">"Fizz"</span></span><br><span class="line">  | P5 _        -&gt; printfn <span class="string">"Buzz"</span></span><br><span class="line">  | x           -&gt; printfn <span class="string">"%d"</span> x</span><br><span class="line"></span><br><span class="line">Seq.iter f &#123;<span class="number">1.</span><span class="number">.100</span>&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> <span class="keyword">do</span> f i</span><br></pre></td></tr></table></figure>
<p>หรือใช้ Partial case เดียว คือ <code>DivisibleBy</code> ซึ่งเป็น Optimize version ของแบบแรก</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (|DivisibleBy|_|) divisor i =</span><br><span class="line">    <span class="keyword">if</span> i % divisor = <span class="number">0</span> <span class="keyword">then</span> Some () <span class="keyword">else</span> None</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">match</span> i <span class="keyword">with</span></span><br><span class="line">    | DivisibleBy <span class="number">3</span> &amp; DivisibleBy <span class="number">5</span> -&gt; printfn <span class="string">"FizzBuzz"</span></span><br><span class="line">    | DivisibleBy <span class="number">3</span> -&gt; printfn <span class="string">"Fizz"</span></span><br><span class="line">    | DivisibleBy <span class="number">5</span> -&gt; printfn <span class="string">"Buzz"</span></span><br><span class="line">    | _ -&gt; printfn <span class="string">"%d"</span> i</span><br></pre></td></tr></table></figure>
<h2 id="Computation_expression"><a href="#Computation_expression" class="headerlink" title="Computation expression"></a>Computation expression</h2><p>วิธีที่ยากสุด คือ เขียนด้วย Computation expression</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">M</span>&lt;<span class="title">'T</span>&gt;  </span>= M <span class="keyword">of</span> <span class="attribute">'T</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MonadBuilder</span></span>() =</span><br><span class="line">    <span class="keyword">member</span> this.Return x = M x</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> MonadBuilder()</span><br><span class="line"><span class="keyword">let</span> fizz = <span class="keyword">function</span></span><br><span class="line">    | x <span class="keyword">when</span> x % <span class="number">3</span> = <span class="number">0</span>  -&gt; m &#123; <span class="keyword">return</span> x, <span class="string">"Fizz"</span>&#125;</span><br><span class="line">    | x -&gt; m &#123; <span class="keyword">return</span> x, <span class="string">""</span> &#125;</span><br><span class="line"><span class="keyword">let</span> buzz = <span class="keyword">function</span></span><br><span class="line">    | M (x,s) <span class="keyword">when</span> x % <span class="number">5</span> = <span class="number">0</span> -&gt; m &#123; <span class="keyword">return</span> x, s + <span class="string">"Buzz"</span> &#125;</span><br><span class="line">    | M (x,s) -&gt; m &#123; <span class="keyword">return</span> x, s &#125;</span><br><span class="line">[<span class="number">1.</span><span class="number">.100</span>] |&gt; List.map(fizz) |&gt; List.map(buzz) |&gt; printfn <span class="string">"%A"</span></span><br></pre></td></tr></table></figure>
<p>Links</p>
<ul>
<li><a href="http://stackoverflow.com/questions/2422697/how-to-code-fizzbuzz-in-f" target="_blank" rel="external">http://stackoverflow.com/questions/2422697/how-to-code-fizzbuzz-in-f</a></li>
<li><a href="http://zecl.hatenablog.com/entry/20110711/p1" target="_blank" rel="external">http://zecl.hatenablog.com/entry/20110711/p1</a></li>
<li><a href="https://twitter.com/CallMeKohei/status/673677619250913280" target="_blank" rel="external">https://twitter.com/CallMeKohei/status/673677619250913280</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Fuzz_Buzz"><a href="#Fuzz_Buzz" class="headerlink" title="Fuzz Buzz"></a>Fuzz Buzz</h2><p>Fizz Buzz เป็นโจทย์ที่นิยมใช้สำหรับ ทดสอบก]]>
    </summary>
    
      <category term="fs" scheme="http://wk-j.gihub.io/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[F# Active Patterns]]></title>
    <link href="http://wk-j.gihub.io/2016/01/23/fsharp-active-pattern/"/>
    <id>http://wk-j.gihub.io/2016/01/23/fsharp-active-pattern/</id>
    <published>2016-01-23T12:27:15.000Z</published>
    <updated>2016-01-24T16:55:26.000Z</updated>
    <content type="html"><![CDATA[<p>F# มี syntax พิเศษที่ช่วยให้เขียน Pattern matching ได้ง่ายขึ้น โดยใช้โครงสร้างคล้าย ๆ กับ <a href="https://msdn.microsoft.com/en-us/library/dd233226.aspx" target="_blank" rel="external">Union</a> ใช้วิธีประกาศ Test case ที่ต้องการในเครื่องหมาย <code>(||)</code> Active pattern มีหลายแบบ ขึ้นอยู่กับจำนวน Case ที่ใช้</p>
<h2 id="Single-Case_Active_Patterns"><a href="#Single-Case_Active_Patterns" class="headerlink" title="Single-Case Active Patterns"></a>Single-Case Active Patterns</h2><p>เป็น Active pattern ที่มี Case เดียวและมี Input เพียงตัวเดียว Active pattern แบบนี้ต้อง Return ผลลัพทธ์เสมอ</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (|Remainder2|) x = x % <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> checkNumber = <span class="keyword">function</span></span><br><span class="line">    | Remainder2 <span class="number">1</span> -&gt; <span class="string">"even number"</span></span><br><span class="line">    | Remainder2 <span class="number">0</span> -&gt; <span class="string">"odd number"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "even number"</span></span><br><span class="line">checkNumber <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>จากตัวอย่าง <code>Remainder2</code> เป็น Pattern ที่มี Case โดยคำนวณค่า Mod จาก Input ที่ส่งเข้ามา</p>
<h2 id="Partial-Case_Active_Pattern"><a href="#Partial-Case_Active_Pattern" class="headerlink" title="Partial-Case Active Pattern"></a>Partial-Case Active Pattern</h2><p>เป็น Active patten ที่ Return ผลลัพท์เป็น Option และสามารถใช้ Pattern หลายตัวมาประกอบกัน เมื่อต้องการ Matching</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (|LessThen10|_|) x = <span class="keyword">if</span> x &lt; <span class="number">10</span> <span class="keyword">then</span> Some x <span class="keyword">else</span> None</span><br><span class="line"><span class="keyword">let</span> (|Btw10And20|_|) x = <span class="keyword">if</span> x &gt;= <span class="number">10</span> &amp;&amp; x &lt; <span class="number">20</span> <span class="keyword">then</span> Some x <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> checkNumber x =</span><br><span class="line">    <span class="keyword">match</span> x <span class="keyword">with</span></span><br><span class="line">    | LessThen10 a -&gt; <span class="string">"less then 10"</span></span><br><span class="line">    | Btw10And20 a -&gt; <span class="string">"between 10 and 20"</span></span><br><span class="line">    | _ -&gt; <span class="string">"that's a big number"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "that's big number"</span></span><br><span class="line">checkNumber <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p><code>LessThen10</code> และ <code>Btw10And20</code> เป็น Partial pattern ที่ทดสอบว่าตัวเลขอยู่ใน Range ของตัวเองหรือไม่ สังเกตว่า Output ที่ได้จะเป็น Option ซึ่งในกรณีที่ Return ค่าเป็น None แสดงว่า Input ที่รับเข้ามาอยู่นอก Range นั่นเอง ในกรณีที่ Input ที่รับมาไม่อยู่ใน Range ใดเลย เมื่อทำการ Matching ก็จะถูก Evaluate เข้า Case default หรือ <code>_</code> นั่นเอง</p>
<h2 id="Multicase_Active_Pattern"><a href="#Multicase_Active_Pattern" class="headerlink" title="Multicase Active Pattern"></a>Multicase Active Pattern</h2><p>เป็น Pattern matching ที่มีหลาย Case โดย Pattern แบบนี้ต้อง Return choice ตามจำนวนตาม Case ที่ประกาศไว้ใน <code>(||)</code></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (|Q1|Q2|Q3|Q4|) (date:System.DateTime) =</span><br><span class="line">    <span class="keyword">let</span> month = date.Month</span><br><span class="line">    <span class="keyword">match</span> month <span class="keyword">with</span></span><br><span class="line">    |<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span> -&gt; Q1 month</span><br><span class="line">    |<span class="number">4</span>|<span class="number">5</span>|<span class="number">6</span> -&gt; Q2 month</span><br><span class="line">    |<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span> -&gt; Q3 month</span><br><span class="line">    |_ -&gt; Q4 month</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newYearResolution date =</span><br><span class="line">    <span class="keyword">match</span> date <span class="keyword">with</span></span><br><span class="line">    | Q1 _ -&gt; <span class="string">"read"</span></span><br><span class="line">    | Q2 _ -&gt; <span class="string">"write"</span></span><br><span class="line">    | Q3 _ -&gt; <span class="string">"execute"</span></span><br><span class="line">    | Q4 _ -&gt; <span class="string">"sleep"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "sleep"</span></span><br><span class="line">newYearResolution &lt;| DateTime(<span class="number">2015</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p><code>(|Q1|Q2|Q3|Q4|)</code> เป็น Pattern ที่ใช้หา Quarter ของ DateTime ที่รับเข้ามา สังเกตว่าฟังก์ชัน Match จะต้อง Return Q1 - Q4 ให้ครบ</p>
<h2 id="Parameterized_Active_Pattern"><a href="#Parameterized_Active_Pattern" class="headerlink" title="Parameterized Active Pattern"></a>Parameterized Active Pattern</h2><p>เป็น Pattern ที่สามารถเพิ่ม Parameter ตัวที่สอง ซึ่งแตกต่างจาก Pattern แบบอื่นที่สามารถมี Parameter ตัวแรกเพียงตัวเดียว</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>(|Divisible|_|) x y =</span><br><span class="line">    <span class="keyword">if</span> y % x = <span class="number">0</span> <span class="keyword">then</span> Some Divisible</span><br><span class="line">    <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">function</span></span><br><span class="line">    | Divisible <span class="number">2</span> &amp; Divisible <span class="number">3</span> -&gt; <span class="string">"divisible by 6"</span></span><br><span class="line">    | _-&gt; <span class="string">"other"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "divisible by 6"</span></span><br><span class="line">f2 <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p><code>Divisible</code> เป็น Pattern ที่รับ Parameter สองตัว คือ <code>x</code> และ <code>y</code> จะเห็นว่าขั้นตอนการเรียกใช้ คือ ในฟังก์ชั่น <code>f2</code> มีการส่ง Parameter ตัวแรก คือ <code>2</code> และ <code>3</code> จากนั้นตอนเรียกใช้ฟังก์ชั่น <code>f2</code> มีการส่ง Parameter ตัวที่สองคือ <code>12</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>F# มี syntax พิเศษที่ช่วยให้เขียน Pattern matching ได้ง่ายขึ้น โดยใช้โครงสร้างคล้าย ๆ กับ <a href="https://msdn.microsoft.com/en-us/libra]]>
    </summary>
    
      <category term="fs" scheme="http://wk-j.gihub.io/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[เขียน F# แบบ Inline evaluation ด้วย Light Table]]></title>
    <link href="http://wk-j.gihub.io/2016/01/22/fsharp-inline-evaluation-with-lighttable/"/>
    <id>http://wk-j.gihub.io/2016/01/22/fsharp-inline-evaluation-with-lighttable/</id>
    <published>2016-01-22T12:38:28.000Z</published>
    <updated>2016-01-23T04:51:45.000Z</updated>
    <content type="html"><![CDATA[<p>โปรแกรม <a href="http://lighttable.com" target="_blank" rel="external">Light Table</a> เป็น Text editor ที่สามารถเขียนโปรแกรมแบบ Inline evaluation คือ เราสามารถพิมพ์โค้ดและสั่ง Execute คำสั่งในบรรทัดนั้น เพื่อดูผลลัพธ์ได้ทันที</p>
<p>ข้อดีของการเขียนโปรแกรมแบบนี้ คือ เราสามารถใช้ทดสอบโค้ดได้ง่าย ไม่ต้องใช้ IDE หรือเขียนโปรแกรมพิมพ์ผลลัพท์ผ่าน Console  ที่ความยุ่งยาก</p>
<h2 id="u0E40_u0E04_u0E23_u0E37_u0E48_u0E2D_u0E07_u0E21_u0E37_u0E2D_u0E17_u0E35_u0E48_u0E15_u0E49_u0E2D_u0E07_u0E43_u0E0A_u0E49"><a href="#u0E40_u0E04_u0E23_u0E37_u0E48_u0E2D_u0E07_u0E21_u0E37_u0E2D_u0E17_u0E35_u0E48_u0E15_u0E49_u0E2D_u0E07_u0E43_u0E0A_u0E49" class="headerlink" title="เครื่องมือที่ต้องใช้"></a>เครื่องมือที่ต้องใช้</h2><ol>
<li>โปรแกรม F# interactive fsharpi (Mac) / fsi (Windows)</li>
<li>โปรแกรม Light Table</li>
<li>F# Plugin ของ Light Table</li>
</ol>
<h2 id="u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_fsharpi_/_fsi"><a href="#u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_fsharpi_/_fsi" class="headerlink" title="ติดตั้ง fsharpi / fsi"></a>ติดตั้ง fsharpi / fsi</h2><ul>
<li>Mac - <a href="http://fsharp.org/use/mac" target="_blank" rel="external">http://fsharp.org/use/mac</a></li>
<li>Windows - <a href="http://fsharp.org/use/windows" target="_blank" rel="external">http://fsharp.org/use/windows</a></li>
</ul>
<h2 id="u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_Light_Table"><a href="#u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_Light_Table" class="headerlink" title="ติดตั้ง Light Table"></a>ติดตั้ง Light Table</h2><ul>
<li>สามารถโหลดไฟล์ <a href="http://lighttable.com/" target="_blank" rel="external">Installer</a> จากเว็บไซต์ได้โดยตรง</li>
</ul>
<h2 id="u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_F_23_Plugin"><a href="#u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_F_23_Plugin" class="headerlink" title="ติดตั้ง F# Plugin"></a>ติดตั้ง F# Plugin</h2><p>หลังจากติดตั้ง Light Table สามารถติดตั้ง Plugin ผ่าน Plugin manager ตามขั้นตอนต่อไปนี้</p>
<ol>
<li>เปิดโปรแกรม Light Table</li>
<li><p>เปิดหน้าต่าง Plugin manager โดยการกดปุ่ม <code>Ctlr + Space</code> พิมพ์คำว่า <code>plugin</code> แล้วคลิกเลือก <code>Show plugin manager</code></p>
<p> <img src="/images/open-plugin-manager.png" alt=""></p>
</li>
<li><p>ในหน้า Plugin manager ให้ Search คำว่า <code>F#</code> แล้วคลิกปุ่ม Install ที่มุมด้านขวา</p>
<p> <img src="/images/install-plugin.png" alt=""></p>
</li>
</ol>
<h3 id="u0E01_u0E32_u0E23_u0E43_u0E0A_u0E49_u0E07_u0E32_u0E19"><a href="#u0E01_u0E32_u0E23_u0E43_u0E0A_u0E49_u0E07_u0E32_u0E19" class="headerlink" title="การใช้งาน"></a>การใช้งาน</h3><p>หนังจากติดตั้ง Plugin เราสามารถใช้งานได้ทันที่ ด้วยวิธีง่าย ๆ ดังนี้</p>
<ol>
<li>พิมพ์โคัด</li>
<li>Hightlight บรรทัดที่ต้องการ</li>
<li><p>กด <code>Alt + Enter</code></p>
<p> <img src="/images/inline-evaluation.png" alt=""></p>
</li>
</ol>
<p>จากตัวอย่าง</p>
<ul>
<li>ถ้าบรรทัดที่เลือก return void โปรแกรมจะแสดงเครื่องหมายถูก</li>
<li>ส่วนบรรทัดที่ return ค่า โปรแกรมจะแสดงผลลัทธ์ที่ท้ายบรรทัด</li>
</ul>
<p>Links</p>
<ul>
<li>Light Table - <a href="http://lighttable.com" target="_blank" rel="external">http://lighttable.com</a></li>
<li>F# Plugin - <a href="https://github.com/enricosada/LightTable-FSharp" target="_blank" rel="external">https://github.com/enricosada/LightTable-FSharp</a></li>
<li>Use F# on Windows - <a href="http://fsharp.org/use/windows" target="_blank" rel="external">http://fsharp.org/use/windows</a></li>
<li>Use F# on Mac - <a href="http://fsharp.org/use/mac" target="_blank" rel="external">http://fsharp.org/use/mac</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>โปรแกรม <a href="http://lighttable.com" target="_blank" rel="external">Light Table</a> เป็น Text editor ที่สามารถเขียนโปรแกรมแบบ Inline e]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[เขียน F# แบบ Inline evaluation ด้วย Light Table]]></title>
    <link href="http://wk-j.gihub.io/2016/01/22/fsharp-inline-evaluation-with-light-table/"/>
    <id>http://wk-j.gihub.io/2016/01/22/fsharp-inline-evaluation-with-light-table/</id>
    <published>2016-01-22T12:38:28.000Z</published>
    <updated>2016-01-23T14:43:38.000Z</updated>
    <content type="html"><![CDATA[<p>โปรแกรม <a href="http://lighttable.com" target="_blank" rel="external">Light Table</a> เป็น Text editor ที่สามารถเขียนโปรแกรมแบบ Inline evaluation คือ เราสามารถพิมพ์โค้ดและสั่ง Execute คำสั่งในบรรทัดนั้น เพื่อดูผลลัพธ์ได้ทันที</p>
<p>ข้อดีของการเขียนโปรแกรมแบบนี้ คือ เราสามารถใช้ทดสอบโค้ดได้ง่าย ไม่ต้องใช้ IDE หรือเขียนโปรแกรมพิมพ์ผลลัพธ์ผ่าน Console  ที่มีความยุ่งยาก</p>
<h2 id="u0E40_u0E04_u0E23_u0E37_u0E48_u0E2D_u0E07_u0E21_u0E37_u0E2D_u0E17_u0E35_u0E48_u0E15_u0E49_u0E2D_u0E07_u0E43_u0E0A_u0E49"><a href="#u0E40_u0E04_u0E23_u0E37_u0E48_u0E2D_u0E07_u0E21_u0E37_u0E2D_u0E17_u0E35_u0E48_u0E15_u0E49_u0E2D_u0E07_u0E43_u0E0A_u0E49" class="headerlink" title="เครื่องมือที่ต้องใช้"></a>เครื่องมือที่ต้องใช้</h2><ol>
<li>โปรแกรม F# interactive fsharpi (Mac) / fsi (Windows)</li>
<li>โปรแกรม Light Table</li>
<li>F# plugin ของ Light Table</li>
</ol>
<h2 id="u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_fsharpi_/_fsi"><a href="#u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_fsharpi_/_fsi" class="headerlink" title="ติดตั้ง fsharpi / fsi"></a>ติดตั้ง fsharpi / fsi</h2><ul>
<li>Mac - <a href="http://fsharp.org/use/mac" target="_blank" rel="external">http://fsharp.org/use/mac</a></li>
<li>Windows - <a href="http://fsharp.org/use/windows" target="_blank" rel="external">http://fsharp.org/use/windows</a></li>
</ul>
<h2 id="u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_Light_Table"><a href="#u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_Light_Table" class="headerlink" title="ติดตั้ง Light Table"></a>ติดตั้ง Light Table</h2><ul>
<li>สามารถโหลดไฟล์ <a href="http://lighttable.com/" target="_blank" rel="external">Installer</a> จากเว็บไซต์ได้โดยตรง</li>
</ul>
<h2 id="u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_F_23_plugin"><a href="#u0E15_u0E34_u0E14_u0E15_u0E31_u0E49_u0E07_F_23_plugin" class="headerlink" title="ติดตั้ง F# plugin"></a>ติดตั้ง F# plugin</h2><p>หลังจากติดตั้ง Light Table สามารถติดตั้ง Plugin ผ่าน Plugin manager ตามขั้นตอนต่อไปนี้</p>
<ol>
<li>เปิดโปรแกรม Light Table</li>
<li><p>เปิดหน้าต่าง Plugin manager โดยการกดปุ่ม <code>Ctrl + Space</code> พิมพ์คำว่า <code>plugin</code> แล้วคลิกเลือก <code>Show plugin manager</code></p>
<p> <img src="/images/open-plugin-manager.png" alt=""></p>
</li>
<li><p>ในหน้า Plugin manager ให้ Search คำว่า <code>F#</code> แล้วคลิกปุ่ม Install ที่มุมด้านขวา</p>
<p> <img src="/images/install-plugin.png" alt=""></p>
</li>
</ol>
<h2 id="u0E01_u0E32_u0E23_u0E43_u0E0A_u0E49_u0E07_u0E32_u0E19"><a href="#u0E01_u0E32_u0E23_u0E43_u0E0A_u0E49_u0E07_u0E32_u0E19" class="headerlink" title="การใช้งาน"></a>การใช้งาน</h2><p>หนังจากติดตั้ง Plugin เราสามารถใช้งานได้ทันที่ ด้วยวิธีง่าย ๆ ดังนี้</p>
<ol>
<li>พิมพ์โคัด</li>
<li>Hightlight บรรทัดที่ต้องการ</li>
<li><p>กด <code>Ctrl + Enter</code> (Windows) / <code>Command + Enterl</code> (Mac)</p>
<p> <img src="/images/inline-evaluation.png" alt=""></p>
</li>
</ol>
<p>จากตัวอย่าง</p>
<ul>
<li>ถ้าบรรทัดที่เลือก return void โปรแกรมจะแสดงเครื่องหมายถูก</li>
<li>ส่วนบรรทัดที่ return ค่า โปรแกรมจะแสดงผลลัทธ์ที่ท้ายบรรทัด</li>
</ul>
<p>Links</p>
<ul>
<li>Light Table - <a href="http://lighttable.com" target="_blank" rel="external">http://lighttable.com</a></li>
<li>F# plugin - <a href="https://github.com/enricosada/LightTable-FSharp" target="_blank" rel="external">https://github.com/enricosada/LightTable-FSharp</a></li>
<li>Use F# on Windows - <a href="http://fsharp.org/use/windows" target="_blank" rel="external">http://fsharp.org/use/windows</a></li>
<li>Use F# on Mac - <a href="http://fsharp.org/use/mac" target="_blank" rel="external">http://fsharp.org/use/mac</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>โปรแกรม <a href="http://lighttable.com" target="_blank" rel="external">Light Table</a> เป็น Text editor ที่สามารถเขียนโปรแกรมแบบ Inline e]]>
    </summary>
    
      <category term="fs" scheme="http://wk-j.gihub.io/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Const กับ Readonly]]></title>
    <link href="http://wk-j.gihub.io/2016/01/18/csharp-const-and-readonly/"/>
    <id>http://wk-j.gihub.io/2016/01/18/csharp-const-and-readonly/</id>
    <published>2016-01-18T15:22:24.000Z</published>
    <updated>2016-01-20T18:46:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Constant"><a href="#Constant" class="headerlink" title="Constant"></a>Constant</h2><p>ค่าคงที่แบบ compile time constant ใน C# สามารถประกาศด้วย keyword <code>const</code> ซึ่งจะใช้ได้กับ data ประเภท primitive type ดังต่อไปนี้ เท่านั้น</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Boolean, Char, Byte, SByte, Int16, UInt16,</span><br><span class="line">Int32, UInt32, Int64, UInt64, Single, Double, Decimal, String</span><br></pre></td></tr></table></figure>
<p>ค่าคงที่แบบ <code>const</code> จะไม่มีทางเปลี่ยนแปลง มันจึงถูก define เป็นส่วนหนึ่งของ type แบบ static member ไม่ใช่ instance member เหมือน field ทั่วไป</p>
<p>เมื่อมีการอ้างอิง <code>const</code> ณ ส่วนใดของโค้ด compiler จะดึงค่าที่ผูกไว้ไปฝั่งไว้ใน IL ทำให้ขณะรันโปรแกรมไม่จำเป็นต้อง allocate memory</p>
<h3 id="u0E02_u0E49_u0E2D_u0E08_u0E33_u0E01_u0E31_u0E14_u0E02_u0E2D_u0E07_constant__u0E40_u0E1E_u0E37_u0E48_u0E2D_u0E40_u0E17_u0E35_u0E22_u0E1A_u0E01_u0E31_u0E1A_field"><a href="#u0E02_u0E49_u0E2D_u0E08_u0E33_u0E01_u0E31_u0E14_u0E02_u0E2D_u0E07_constant__u0E40_u0E1E_u0E37_u0E48_u0E2D_u0E40_u0E17_u0E35_u0E22_u0E1A_u0E01_u0E31_u0E1A_field" class="headerlink" title="ข้อจำกัดของ constant เพื่อเทียบกับ field"></a>ข้อจำกัดของ constant เพื่อเทียบกับ field</h3><ul>
<li>ไม่สามารถหาค่า address ของ constant ได้</li>
<li>ไม่สามารถส่งค่า <code>const</code> แบบ pass by reference ผ่าน keyword <code>ref</code></li>
<li>ในกรณีที่มีการเปลี่ยนค่า <code>const</code> ใน assembly ที่อ้างอิง จำเป็น ต้อง compile โปรแกรมใหม่</li>
</ul>
<h3 id="u0E15_u0E31_u0E27_u0E2D_u0E22_u0E48_u0E32_u0E07"><a href="#u0E15_u0E31_u0E27_u0E2D_u0E22_u0E48_u0E32_u0E07" class="headerlink" title="ตัวอย่าง"></a>ตัวอย่าง</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> ProductName = <span class="string">"Visual C#"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> _version = <span class="string">"1.0"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = ProductName;</span><br><span class="line">        <span class="keyword">var</span> version = _version;</span><br><span class="line">        Console.WriteLine(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>, name, version);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่าง มีการประกาศตัวแปรแบบ static ชื่อ <code>_version</code> และมีค่า constant ชื่อ <code>ProductName</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.method public hidebysig static</span><br><span class="line">	void Main (</span><br><span class="line">		string[] args</span><br><span class="line">	) cil managed</span><br><span class="line">&#123;</span><br><span class="line">	// Header Size: 12 bytes</span><br><span class="line">	// Code Size: 27 (0x1B) bytes</span><br><span class="line">	// LocalVarSig Token: 0x11000001 RID: 1</span><br><span class="line">	.maxstack 3</span><br><span class="line">	.entrypoint</span><br><span class="line">	.locals init (</span><br><span class="line">		[0] string,</span><br><span class="line">		[1] string</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	/* 0x0000025C 00           */ IL_0000: nop</span><br><span class="line">	/* 0x0000025D 7201000070   */ IL_0001: ldstr     "Visual C#"</span><br><span class="line">	/* 0x00000262 0A           */ IL_0006: stloc.0</span><br><span class="line">	/* 0x00000263 7E02000004   */ IL_0007: ldsfld    string Program::_version</span><br><span class="line">	/* 0x00000268 0B           */ IL_000C: stloc.1</span><br><span class="line">	/* 0x00000269 7215000070   */ IL_000D: ldstr     "&#123;0&#125; &#123;1&#125;"</span><br><span class="line">	/* 0x0000026E 06           */ IL_0012: ldloc.0</span><br><span class="line">	/* 0x0000026F 07           */ IL_0013: ldloc.1</span><br><span class="line">	/* 0x00000270 280400000A   */ IL_0014: call      void [mscorlib]System.Console::WriteLine(string, object, object)</span><br><span class="line">	/* 0x00000275 00           */ IL_0019: nop</span><br><span class="line">	/* 0x00000276 2A           */ IL_001A: ret</span><br><span class="line">&#125; // end of method Program::Main</span><br></pre></td></tr></table></figure>
<p>เมื่อ compile เป็นคำสั่ง IL จะพบความแตกต่างระหว่างตัวแปรแบบ <code>static</code> ธรรมดากับค่า <code>static const</code> ดังนี้</p>
<ul>
<li>บรรทัดที่ 17 จะเห็นว่าตำแหน่งที่อ้างถึง ค่า <code>const</code> มีการฝั่งค่า string literal <code>Visual C#</code> ไว้เลย</li>
<li>บรรทัดที่ 19 ตำแหน่งตัวแปรแบบ <code>static</code> ยังมีการอ้างอิงไปยัง ชื่อตัวแปรโดยใช้คำสั่ง <code>ldsfld string Program::_version</code> อยู่</li>
</ul>
<h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><p>C# มี keyword <code>readonly</code> สำหรับกำหนดค่าคงที่แบบ runtime constant จะต่างจาก <code>const</code> คือ <code>readonly</code> สามารถใช้ได้กับ reference type และสามารถย้ายการกำหนดค่ามาไว้ใน constructure ได้</p>
<h3 id="u0E15_u0E31_u0E27_u0E2D_u0E22_u0E48_u0E32_u0E07-1"><a href="#u0E15_u0E31_u0E27_u0E2D_u0E22_u0E48_u0E32_u0E07-1" class="headerlink" title="ตัวอย่าง"></a>ตัวอย่าง</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> Leg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> Eye = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Leg = <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่างเราสามารถกำหนดค่า constant แบบ readonly ได้ใน constructure หรือกำหนดค่าบรรทัดเดียวกับการประกาศชื่อตัวแปรก็ได้</p>
<h3 id="readonly__u0E15_u0E48_u0E32_u0E07_u0E08_u0E32_u0E01_const__u0E2D_u0E22_u0E48_u0E32_u0E07_u0E44_u0E23"><a href="#readonly__u0E15_u0E48_u0E32_u0E07_u0E08_u0E32_u0E01_const__u0E2D_u0E22_u0E48_u0E32_u0E07_u0E44_u0E23" class="headerlink" title="readonly ต่างจาก const อย่างไร"></a><code>readonly</code> ต่างจาก <code>const</code> อย่างไร</h3><ul>
<li>สามารถใช้กับ reference type</li>
<li>ค่าคงที่แบบ <code>readonly</code> จะถูก evaluate ขณะรัน จึงไม่มีปัญหา cross-assembly versioning เหมือน <code>const</code></li>
<li><code>readonly</code> ไม่จำเป็นต้องเป็น <code>static</code></li>
<li>แต่ละ instance ของคลาสสามารถมีค่าต่างกันได้ เพราะสามารถกำหนดค่าผ่าน constructure</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Constant"><a href="#Constant" class="headerlink" title="Constant"></a>Constant</h2><p>ค่าคงที่แบบ compile time constant ใน C# สามารถ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Open กับ Closed Type]]></title>
    <link href="http://wk-j.gihub.io/2016/01/14/csharp-open-and-close-types/"/>
    <id>http://wk-j.gihub.io/2016/01/14/csharp-open-and-close-types/</id>
    <published>2016-01-14T15:54:15.000Z</published>
    <updated>2016-01-18T17:48:46.000Z</updated>
    <content type="html"><![CDATA[<p>การใช้งาน generic ถ้าระบุ type argument ครบจำนวนที่ประกาศไว้ในเครื่องหมาย  <code>&lt;&gt;</code> เราจะเรียก type นั้นว่า closed type ถ้ามีการระบุไว้เพียงบางส่วน จะเรียกว่า structured type แต่ถ้าไม่ระบุ type argument เลยจะเรียกว่า open type</p>
<h2 id="u0E04_u0E27_u0E32_u0E21_u0E41_u0E15_u0E01_u0E15_u0E48_u0E32_u0E07_u0E23_u0E30_u0E2B_u0E27_u0E48_u0E32_u0E07_open__u0E41_u0E25_u0E30_closed_type"><a href="#u0E04_u0E27_u0E32_u0E21_u0E41_u0E15_u0E01_u0E15_u0E48_u0E32_u0E07_u0E23_u0E30_u0E2B_u0E27_u0E48_u0E32_u0E07_open__u0E41_u0E25_u0E30_closed_type" class="headerlink" title="ความแตกต่างระหว่าง open และ closed type"></a>ความแตกต่างระหว่าง open และ closed type</h2><ul>
<li>Open type ถือว่าเป็น type ที่ไม่สมบูรณ์ จึงไม่สามารถสร้าง instance ได้ แต่สามารถใช้เป็น input ของ operator <code>typeof</code></li>
<li>Close type สามารถสร้าง instance ได้เหมือนคลาสทั่วไป</li>
</ul>
<h2 id="u0E15_u0E31_u0E27_u0E2D_u0E22_u0E48_u0E32_u0E07"><a href="#u0E15_u0E31_u0E27_u0E2D_u0E22_u0E48_u0E32_u0E07" class="headerlink" title="ตัวอย่าง"></a>ตัวอย่าง</h2><p>สร้าง GenericStruct เป็น generic type ง่าย ๆ โดยมีการระบุเงื่อนไขว่า type argument ต้องเป็น value type เท่านั้น</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line">using static System.Console;</span><br><span class="line"></span><br><span class="line">public class GenericStruct&lt;T&gt; where T: struct &#123;</span><br><span class="line">    public string Name &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return typeof(T).Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u0E17_u0E14_u0E2A_u0E2D_u0E1A"><a href="#u0E17_u0E14_u0E2A_u0E2D_u0E1A" class="headerlink" title="ทดสอบ"></a>ทดสอบ</h2><p>ทดสอบว่าสามารถสร้าง instance ของ open และ closed type ผ่าน <code>Activator.CreateInstance</code> ได้หรือไม่</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">object</span> <span class="title">CreateInstance</span>(<span class="params">Type t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Activator.CreateInstance(t);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            WriteLine(e.Message);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> open1 = CreateInstance(<span class="keyword">typeof</span>(GenericStruct&lt;&gt;));</span><br><span class="line">        <span class="keyword">var</span> close1 = CreateInstance(<span class="keyword">typeof</span>(GenericStruct&lt;<span class="keyword">int</span>&gt;));</span><br><span class="line"></span><br><span class="line">        WriteLine(open1 == <span class="keyword">null</span>);                           <span class="comment">// true</span></span><br><span class="line">        WriteLine(close1 != <span class="keyword">null</span>);                          <span class="comment">// true</span></span><br><span class="line">        WriteLine((close1 <span class="keyword">as</span> GenericStruct&lt;<span class="keyword">int</span>&gt;).Name);     <span class="comment">// Int32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่างจะเห็นว่าเราไม่สามารถ สร้าง  instance ของ <code>GenericStruct&lt;&gt;</code> ได้ เนื่องจากไม่ระบุ type argument ไว้ในเครื่องหมาย <code>&lt;&gt;</code> ในบรรทัดที่ <code>14</code> จึงได้ <code>open1</code> มีค่า <code>null</code></p>
<p>ส่วน closed type <code>GenericStuct&lt;int&gt;</code> สามารถสร้าง instance และแสดงค่า <code>Name</code> ได้ปกติ</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>การใช้งาน generic ถ้าระบุ type argument ครบจำนวนที่ประกาศไว้ในเครื่องหมาย  <code>&lt;&gt;</code> เราจะเรียก type นั้นว่า closed type ถ้าม]]>
    </summary>
    
      <category term="cs" scheme="http://wk-j.gihub.io/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Covariance กับ Contravariance (Draft)]]></title>
    <link href="http://wk-j.gihub.io/2016/01/14/csharp-covariance-and-contravariance/"/>
    <id>http://wk-j.gihub.io/2016/01/14/csharp-covariance-and-contravariance/</id>
    <published>2016-01-14T08:31:49.000Z</published>
    <updated>2016-01-17T11:27:24.000Z</updated>
    <content type="html"><![CDATA[<p> ใน C# concept ที่เรียกว่า covariance และ contravariance ถูกใช้กับอะไรบ้าง</p>
<ul>
<li>ใช้กับ array ในเวอร์ชัน 1.0</li>
<li>ใช้กับ delegate ในเวอร์ชั่น 2.0</li>
<li>ใช้กับ generic ในเวอร์ชั่น 4.0</li>
</ul>
<h2 id="Substitution"><a href="#Substitution" class="headerlink" title="Substitution"></a>Substitution</h2><p>ก่อนจะรู้จักกับ covariance ต้องทำความเข้าใจกับหลักการ substitution ใน C# เสียก่อน</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span> &#123; .. &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> &#123; .. &#125;</span><br></pre></td></tr></table></figure>
<p>จาก class hierarchy จะเห็นว่า Animal เป็น supertype ของ Cat</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Cat();    <span class="comment">// ok</span></span><br><span class="line">Cat b = <span class="keyword">new</span> Animal();    <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>จากตัวอย่าง <code>Animal</code> เป็นเซ็ตที่ใหญ่กว่าตามหลัก <em>substitution principle</em> เราสามารถใช้ instance ของ <code>Cat</code> แทน instance ของ <code>Animal</code> ได้ แต่ไม่สามารถใช้ instance ของ <code>Animal</code> แทน <code>Cat</code> ให้นึกภาพว่า เราไม่สามารถนำกล่องที่ใหญ่มาใส่ในกล่องที่เล็กกว่านั่นเอง</p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>Array ที่มี element เป็น reference type ใน C# ถือว่าเป็น covariance</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal[] animals = <span class="keyword">new</span> Cat[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่าง <code>Animal[]</code> compatible กับ <code>Cat[]</code> สามารถใช้ instance ของ <code>Cat</code> แทน <code>Animal</code> เราเรียกการ assign ค่าที่ type เล็กกว่าอยู่ด้านขวาของเครื่องหมาย <code>=</code> ว่า covariance</p>
<p>แต่ covariance ของ array เป็น covariance แบบไม่ safe เนื่องจากเราสามารถใส่ instance ของคลาสอื่นนอกเหนือจาก <code>Cat</code> แต่อยู่ hierarch  ถัดจาก <code>Animal</code> ซึ่งจะทำให้เกิด <code>ArrayTypeMismatchException</code> ขณะรัน</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Attempted to access an element as a type incompatible with the array.</span></span><br><span class="line">animals[<span class="number">0</span>] = <span class="keyword">new</span> Dog()</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่างจะเกิด error ขณะรัน เนื่องจาก backing store ของ array ถูกกำหนดให้เก็บ <code>Cat</code> ตั้งแต่ต้น จึงไม่สามารถเก็บ element ที่มี type อื่นได้ ถึงแม้จะเป็น subtype ของ <code>Animal</code> เหมือนกันก็ตาม</p>
<p>Covariance ใน array ถูก implement ตั้งแต่ C# 1.0 เพื่อให้เหมือนกับ Java ในขณะนั้น ถึงปัจจุบันปัญหา <code>TypeMissMatch</code> ก็ยังอยู่ ไม่สามารถตรวจสอบขณะ compile ได้</p>
<p>ใน C# รุ่นต่อมา มีการ implement covariance กับส่วนอื่น ซึ่งจะไม่มีปัญหาลักษณะนี้ เนื่องจากมีการออกแบบให้มีความปลอดภัยตั้งแต่ต้น</p>
<h2 id="Method_group"><a href="#Method_group" class="headerlink" title="Method group"></a>Method group</h2><h4 id="Covariance"><a href="#Covariance" class="headerlink" title="Covariance"></a>Covariance</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Cat <span class="title">MakeCat</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line">Func&lt;Animal&gt; makeAnimal = MakeCat</span><br></pre></td></tr></table></figure>
<p>Covariant จะทำให้ <code>Func&lt;Animal&gt;</code> compatible กับ <code>MakeCat</code> เนื่องจาก <code>Animal</code> ใหญ่กว่า <code>Cat</code> จำสามารถทำ implicit conversion</p>
<h4 id="Contravaraince"><a href="#Contravaraince" class="headerlink" title="Contravaraince"></a>Contravaraince</h4><p>ตัวอย่างนี้มีสอง method คือ <code>ShowCat</code> ที่รับ <code>Cat</code> เป็น parameter และ <code>Animal</code> ที่รับ <code>Animal</code> เป็น parameter</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowCat</span>(<span class="params">Cat c</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAnimal</span>(<span class="params">Animal c</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่างเราสามารถ assign method ไปยัง delegate <code>Action</code> ได้ดังนี้</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Action&lt;Cat&gt; action2 = ShowAnimal;   <span class="comment">// legal</span></span><br><span class="line">Action&lt;Animal&gt; action1 = ShowCat;   <span class="comment">// illegal</span></span><br></pre></td></tr></table></figure>
<p>จากหลัก <em>substution principle</em> <code>Cat</code> นั้นเล็กว่า <code>Animal</code></p>
<ul>
<li>บรรทัดแรก <code>Action&lt;Cat&gt;</code> compatible กับ <code>ShowAnimal</code> เนื่องจาก เราสามารถใช้ <code>Cat</code> แทน <code>Animal</code> ได้ ในตัวอย่างนี้ถึงแม้จะใช้หลัก <code>substitution</code> เหมือนเดิม แต่ทิศทางการ assign ค่าด้วยเครื่องหมาย <code>=</code> จะกลับข้างกัน เราเรียก operation ลักษณะนี้ว่า <code>contravariance</code>  </li>
<li>บรรทัดที่สอง <code>Action&lt;Animal&gt;</code> ไม่สามารถใช้แทน <code>ShowCat</code> ได้ เนื่องจากจะผิดหลัก <code>substitution</code> เพราะว่า <code>Animal</code> ใหญ่กว่า <code>Cat</code> จึงไม่สามารถใช้ <code>Animal</code> แทน <code>Cat</code> นั่นเอง</li>
</ul>
<h2 id="Generic_delegate"><a href="#Generic_delegate" class="headerlink" title="Generic delegate"></a>Generic delegate</h2><p>ใน C# 4.0 มีสิ่งที่เรียกว่า safe generic variant ที่ใช้ได้กับ interface และ delegate</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> TResult Func&lt;<span class="keyword">in</span> T, <span class="keyword">out</span> TResult&gt;(T arg);</span><br></pre></td></tr></table></figure>
<p>จากตัวอย่าง เราสามารถประกาศ delegate ชื่อ <code>Func</code> ที่มี type parameter ตัวแรกเป็น contravariance <code>T</code> และมี type parameter ตัวที่สองเป็น covariance <code>TResult</code></p>
<ul>
<li>ใช้ keyword <code>in</code> เพื่อระบุว่า type parameter เป็น contravariance</li>
<li>ใช้ keyword <code>out</code> เพื่อระบุว่า type parameter เป็น variance</li>
</ul>
<p>เรียกใช้งาน</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Animal, Cat&gt; f1 = (x) =&gt; <span class="keyword">new</span> Cat();</span><br><span class="line">Func&lt;Cat,Animal&gt; f2 = f1;</span><br></pre></td></tr></table></figure>
<p><code>Func&lt;Animl,Cat&gt;</code> compatible กับ <code>Func&lt;Cat, Animal&gt;</code> เนื่องจากจาก type parameter ตัวแรกเป็น contravariance <code>Cat</code> ซึ่งเป็น type ที่เล็กกว่าจึงสามารถส่งเข้าไปในฟังก์ชั่นแทน <code>Animal</code> ส่วน type parameter ตัวที่สองเป็น covariance เราจึงใช้ <code>Animal</code> เพื่อรับค่าแทน <code>Cat</code> ที่ return มาจากฟังกํชั่นได้เช่นเดียวกัน</p>
<p>Links</p>
<ul>
<li><a href="http://tomasp.net/blog/variance-explained.aspx" target="_blank" rel="external">The theory behind covariance and contravariance in C# 4</a></li>
<li><a href="https://blogs.msdn.microsoft.com/ericlippert/2007/10/16/covariance-and-contravariance-in-c-part-one/" target="_blank" rel="external">Covariance and Contravariance in C#</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p> ใน C# concept ที่เรียกว่า covariance และ contravariance ถูกใช้กับอะไรบ้าง</p>
<ul>
<li>ใช้กับ array ในเวอร์ชัน 1.0</li>
<li>ใช้กับ deleg]]>
    </summary>
    
      <category term="cs" scheme="http://wk-j.gihub.io/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Checked กับ Unchecked]]></title>
    <link href="http://wk-j.gihub.io/2016/01/11/csharp-checked-and-unchecked/"/>
    <id>http://wk-j.gihub.io/2016/01/11/csharp-checked-and-unchecked/</id>
    <published>2016-01-11T11:11:57.000Z</published>
    <updated>2016-01-24T06:41:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Max__26amp_3B_Min"><a href="#Max__26amp_3B_Min" class="headerlink" title="Max &amp; Min"></a>Max &amp; Min</h2><p>Primitive type ใน C# เช่น short float หรือ int จะมี min และ max value เป็นค่าต่ำสุดและสูงสุดที่เป็นไปได้ ค่านี้ถูกกำหนดโดยจำนวน bit ของ type เช่น int มี 32 bit เลขฐานสองขนาด 32 bit สามารถแสดงตัวเลขได้ถึง 4294967296 แต่เนื่องจาก int เป็น sign integer ต้องใช้ 1 bit สำหรับเก็บ flag + หรือ - ดังนั้น bit ที่ใช้สำหรับเก็บตัวเลขจึงเหลือ 31 bit ทำให้สามารถเก็บค่าต่ำสุดและสูงสุดดังนี้</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> Int32 MaxValue = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> Int32 MinValue = -<span class="number">2147483648</span>;</span><br></pre></td></tr></table></figure>
<p>จากปัจจัยนี้ทำให้ int ไม่สามารถใช้เก็บค่าที่ต่ำหรือสูงกว่า min และ max นี้ได้ ถ้าพยายาม assign ค่านอกจาก range นี้ก็จะเกิดสิ่งที่เรียกกว่า overflow</p>
<p>ภาษาต่าง ๆ จะมีวิธีจัดการกับ overflow ที่ต่างกัน เช่น C, C++ จะไม่สนใจ overflow และไม่ถือว่า overflow คือ error ดังนั้นโปรแกรมเมอร์ ต้องควบคุมจัดการเอง</p>
<p>ภาษา Visual Basic จะตรวจจับ overflow ขณะทำงาน และจะ throw exception ออกมาเมื่อเจอเคสแบบนี้</p>
<p>ส่วน C# โดย default จะปิดการตรวจจับ overflow ไว้ คือ unchecked นั่นเอง แต่สามารถเปิดให้ checked ได้ด้วยการ compile ด้วย flag <code>/checked+</code> ซึ่ง compiler จะเพิ่มโค้ดชุดพิเศษแทนที่ชุดปกติ เช่น เปลี่ยน IL instruction จาก <code>add</code> เป็น <code>add.ovf</code></p>
<h2 id="u0E17_u0E14_u0E2A_u0E2D_u0E1A"><a href="#u0E17_u0E14_u0E2A_u0E2D_u0E1A" class="headerlink" title="ทดสอบ"></a>ทดสอบ</h2><p>มาดูกันว่าโปรแกรม <code>Test.cs</code> ที่จะใช้ทดสอบเมื่อ compile ด้วย flag <code>/checked+</code> โปรแกรมที่ได้นั้นต่างกับโปรแกรมปกติอย่างไร</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = Int32.MaxValue + Int32.Parse(<span class="string">"1"</span>);</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ลอง compile Test.cs เป็นสองแบบ คือ แบบธรรมดา และแบบมี <code>/checked+</code></p>
<ol>
<li>Compile Test.cs เป็น exe ก่อนด้วย dmcs</li>
<li>Decompile exe ที่ได้จากข้อ 1 ด้วย monodis เพื่อเช็ค IL instruction</li>
</ol>
<p>Compile และ decompile แบบธรรมดา</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmcs -out:Unchecked.exe Unchecked.cs</span><br><span class="line">monodis --output=Unchecked.il Unchecked.exe</span><br></pre></td></tr></table></figure>
<p>Compile ด้วย <code>/checked+</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmcs /checked+ -out:Checked.exe Checked.cs</span><br><span class="line">monodis --output=Checked.il Checked.exe</span><br></pre></td></tr></table></figure>
<h2 id="IL_instruction"><a href="#IL_instruction" class="headerlink" title="IL instruction"></a>IL instruction</h2><p>IL instruction ของโปรแกรมต่างกันอย่างไร</p>
<p><strong>แบบที่ 1</strong> Unchecked.il ได้จาก Unchecked.exe</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method line 2</span></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> hidebysig</span><br><span class="line">       <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>)  cil managed</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// Method begins at RVA 0x2058</span></span><br><span class="line">.entrypoint</span><br><span class="line"><span class="comment">// Code size 24 (0x18)</span></span><br><span class="line">.maxstack <span class="number">2</span></span><br><span class="line">.<span class="function">locals <span class="title">init</span> (<span class="params"></span><br><span class="line">    int32	V_0</span>)</span><br><span class="line">IL_0000:  ldc.i4 2147483647</span><br><span class="line">IL_0005:  ldstr "1"</span><br><span class="line">IL_000a:  call int32 int32::<span class="title">Parse</span>(<span class="params"><span class="keyword">string</span></span>)</span><br><span class="line">IL_000f:  add</span><br><span class="line">IL_0010:  stloc.0</span><br><span class="line">IL_0011:  ldloc.0</span><br><span class="line">IL_0012:  call <span class="keyword">void</span> class [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params">int32</span>)</span><br><span class="line">IL_0017:  ret</span><br><span class="line">&#125; <span class="comment">// end of method Test::Main</span></span></span><br></pre></td></tr></table></figure>
<p><strong>แบบที่ 2</strong> Checked.il ได้จาก Checked.exe</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method line 2</span></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> hidebysig</span><br><span class="line">       <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>)  cil managed</span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="comment">// Method begins at RVA 0x2058</span></span><br><span class="line">.entrypoint</span><br><span class="line"><span class="comment">// Code size 24 (0x18)</span></span><br><span class="line">.maxstack <span class="number">2</span></span><br><span class="line">.<span class="function">locals <span class="title">init</span> (<span class="params"></span><br><span class="line">    int32	V_0</span>)</span><br><span class="line">IL_0000:  ldc.i4 2147483647</span><br><span class="line">IL_0005:  ldstr "1"</span><br><span class="line">IL_000a:  call int32 int32::<span class="title">Parse</span>(<span class="params"><span class="keyword">string</span></span>)</span><br><span class="line">IL_000f:  add.ovf</span><br><span class="line">IL_0010:  stloc.0</span><br><span class="line">IL_0011:  ldloc.0</span><br><span class="line">IL_0012:  call <span class="keyword">void</span> class [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params">int32</span>)</span><br><span class="line">IL_0017:  ret</span><br><span class="line">&#125; <span class="comment">// end of method Test::Main</span></span></span><br></pre></td></tr></table></figure>
<p>จะเห็นว่า IL instruction ของทั้งสองโปรแกรมมีหน้าแทบเหมือนกัน ยกเว้นเพียงบรรทัดที่ 14 ที่มี instruction ต่างกัน คือ <code>add</code> กับ <code>add.ovf</code></p>
<h2 id="u0E01_u0E32_u0E23_u0E17_u0E33_u0E07_u0E32_u0E19"><a href="#u0E01_u0E32_u0E23_u0E17_u0E33_u0E07_u0E32_u0E19" class="headerlink" title="การทำงาน"></a>การทำงาน</h2><p>จาก IL ที่ได้จะเห็นว่า มีเพียง instruction เดียวที่ต่างกัน แล้วโปรแกรมทั้งสองจะทำงานต่างกันหรือไม่</p>
<p><strong>1. รันโปรแกรมแบบ unchecked</strong></p>
<p>รันโปรแกรมได้ปกติ ไม่เกิด exception แต่ได้ผลลัพท์ คือ <code>-2147483648</code> ซึ่งผิดคาดจากที่ตั้งใจไว้ ตาม sense การบวกเลขเราน่าจะได้ผลลัพท์ลักษณะนี้ <code>2147483647 + 1 = 21474836478</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mono Unchecked.exe</span><br><span class="line">-<span class="number">2147483648</span></span><br></pre></td></tr></table></figure>
<p><strong>2. โปรแกรมแบบ checked</strong></p>
<p>จะมี error คือ System.OverflowException ซึ่งหมายความว่า CLR ตรวจเจอ overflow จึงทำการ throw exception ออกมา</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mono Checked.exe</span><br><span class="line"></span><br><span class="line">Unhandled Exception:</span><br><span class="line">System.OverflowException: Arithmetic operation resulted <span class="keyword">in</span> an overflow.</span><br><span class="line">   at Test.Main (System.String[] args) <span class="keyword">in</span> &lt;filename unknown&gt;:line <span class="number">0</span></span><br><span class="line">[ERROR] FATAL UNHANDLED EXCEPTION: System.OverflowException: Arithmetic operation resulted <span class="keyword">in</span> an overflow.</span><br><span class="line">   at Test.Main (System.String[] args) <span class="keyword">in</span> &lt;filename unknown&gt;:line <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="u0E2A_u0E23_u0E38_u0E1B"><a href="#u0E2A_u0E23_u0E38_u0E1B" class="headerlink" title="สรุป"></a>สรุป</h2><p>จากการทดสอบจะเห็นว่า โปรแกรมที่ไม่เช็ค overflow สามารถทำงานได้ โดยไม่มี error แต่ผลลัพท์ไม่ถูกต้อง ในการใช้งานจริงโปรแกรมเมอร์ต้องแน่ใจว่า โค้ดที่เขียนจะต้องอยู่ภายใน range ของ type นั้น มิฉะนั้นโปรแกรมก็จะทำงานผิดพลาด</p>
<p>ส่วนโปรแกรมที่เช็ค overflow ซึ่งโดยปกติจะมีประสิทธิภาพต่ำกว่าแบบ unchecked เล็กน้อย จะมี runtime exception และไม่แสดงผลลัพท์ใด ๆ ในทางปฏิบัติโปรแกรมเมอร์สามารถจัดการ exception ที่เกิดขึ้นโดยใช้ประโยค <code>try ... catch</code> จากนั้นก็เขียนโลจิกเพิ่มเติมเพื่อกัดการกับ error เพื่อช่วยป้องกันความผิดพลาดของโปรแกรม</p>
<p>สรุปสั้น ๆ คือ</p>
<ul>
<li>unchecked เร็วกว่า</li>
<li>checked ปลอดภัยกว่า</li>
</ul>
<h2 id="u0E2B_u0E21_u0E32_u0E22_u0E40_u0E2B_u0E15_u0E38"><a href="#u0E2B_u0E21_u0E32_u0E22_u0E40_u0E2B_u0E15_u0E38" class="headerlink" title="หมายเหตุ"></a>หมายเหตุ</h2><p>นอกจากการใช้ compiler flag <code>/checked+</code> ซึ่งจะมีผลกับ instruction ของทั้งโปรแกรม เราสามารถเขียนโค้ดสำหรับ checked หรือ unchecked overflow เฉพาะส่วนที่ต้องการได้ โดยใช้ operator <code>checked</code> กับ <code>unchecked</code> ตามตัวอย่างนี้</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Checked1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Int32 i = Int32.MaxValue;</span><br><span class="line">        i = <span class="keyword">checked</span> (i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Checked2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">checked</span> &#123;</span><br><span class="line">            Int32 i = Int32.MaxValue;</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Unchecked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">unchecked</span> &#123;</span><br><span class="line">            Int32 i = Int32.MaxValue;</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Max__26amp_3B_Min"><a href="#Max__26amp_3B_Min" class="headerlink" title="Max &amp; Min"></a>Max &amp; Min</h2><p>Primitive type ใน ]]>
    </summary>
    
      <category term="cs" scheme="http://wk-j.gihub.io/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[String กับ string]]></title>
    <link href="http://wk-j.gihub.io/2016/01/10/csharp-keyword-and-bcl/"/>
    <id>http://wk-j.gihub.io/2016/01/10/csharp-keyword-and-bcl/</id>
    <published>2016-01-10T11:11:57.000Z</published>
    <updated>2016-01-24T06:43:31.000Z</updated>
    <content type="html"><![CDATA[<p>ใน C# จะมี alias ที่ match กับ type ใน <a href="https://en.wikipedia.org/wiki/List_of_data_types_of_the_Standard_Libraries#Base_Class_Library" target="_blank" rel="external">base class library (BCL)</a> เป็น keyword ตัวพิมพ์เล็ก เช่น System.String มี alias คือ string ทั้ง String ใหญ่และ string เล็กในทางเทคนิกแล้วสามารถใช้แทนกันได้</p>
<p>Alias ของ C# มีทั้งหมด 15 ตัว โดย map อยู่กับ BCL type ดังนี้</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>:  System.Object</span><br><span class="line"><span class="keyword">string</span>:  System.String</span><br><span class="line"><span class="keyword">bool</span>:    System.Boolean</span><br><span class="line"><span class="keyword">byte</span>:    System.Byte</span><br><span class="line"><span class="keyword">sbyte</span>:   System.SByte</span><br><span class="line"><span class="keyword">short</span>:   System.Int16</span><br><span class="line"><span class="keyword">ushort</span>:  System.UInt16</span><br><span class="line"><span class="keyword">int</span>:     System.Int32</span><br><span class="line"><span class="keyword">uint</span>:    System.UInt32</span><br><span class="line"><span class="keyword">long</span>:    System.Int64</span><br><span class="line"><span class="keyword">ulong</span>:   System.UInt64</span><br><span class="line"><span class="keyword">float</span>:   System.Single</span><br><span class="line"><span class="keyword">double</span>:  System.Double</span><br><span class="line"><span class="keyword">decimal</span>: System.Decimal</span><br><span class="line"><span class="keyword">char</span>:    System.Char</span><br></pre></td></tr></table></figure>
<p>Alias ทุกตัว คือ keyword ของภาษา</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">as</span> <span class="keyword">base</span> <span class="keyword">bool</span> <span class="keyword">break</span> <span class="keyword">byte</span> <span class="keyword">case</span> <span class="keyword">catch</span> <span class="keyword">char</span> <span class="keyword">checked</span> class <span class="keyword">const</span></span><br><span class="line"><span class="keyword">continue</span> <span class="keyword">decimal</span> <span class="keyword">default</span> <span class="keyword">delegate</span> <span class="keyword">do</span> <span class="keyword">double</span> <span class="keyword">else</span> <span class="keyword">enum</span> <span class="keyword">event</span> <span class="keyword">explicit</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">false</span> <span class="keyword">finally</span> <span class="keyword">fixed</span> <span class="keyword">float</span> <span class="keyword">for</span> <span class="keyword">foreach</span> <span class="keyword">goto</span> <span class="keyword">if</span> <span class="keyword">implicit</span> <span class="keyword">in</span></span><br><span class="line"><span class="title">in</span> (<span class="params">generic modifier</span>) <span class="keyword">int</span> <span class="keyword">interface</span> <span class="keyword">internal</span> <span class="keyword">is</span> <span class="keyword">lock</span> <span class="keyword">long</span> namespace</span><br><span class="line">new <span class="keyword">null</span> <span class="keyword">object</span> <span class="keyword">operator</span> <span class="keyword">out</span> <span class="title">out</span> (<span class="params">generic modifier</span>) <span class="keyword">override</span> <span class="keyword">params</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">protected</span> <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">ref</span> return <span class="keyword">sbyte</span> <span class="keyword">sealed</span> <span class="keyword">short</span> <span class="keyword">sizeof</span></span><br><span class="line"><span class="keyword">stackalloc</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="keyword">struct</span> <span class="keyword">switch</span> <span class="keyword">this</span> throw <span class="keyword">true</span> <span class="keyword">try</span> <span class="keyword">typeof</span> <span class="keyword">uint</span></span><br><span class="line"><span class="keyword">ulong</span> <span class="keyword">unchecked</span> <span class="keyword">unsafe</span> <span class="keyword">ushort</span> <span class="keyword">using</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="keyword">volatile</span> <span class="keyword">while</span></span></span><br></pre></td></tr></table></figure>
<p>เมื่อ alias กับ BCL type ทำงานเหมือนกัน แล้วจะเลือกใช้ตัวไหน? เรื่องนี้มีความเห็นหลายแบบ เช่น</p>
<p>ใน <a href="https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md" target="_blank" rel="external">C# coding style</a> ของทีม corefx บอกว่าพวกเขาใช้ alias ทั้งหมดทุกกรณี เหตุผลอย่างหนึ่งคือ alias เป็น keyword ประโยชน์ที่ได้จากมันก็คือ สามารถเรียกใช้เมื่อไหร่ก็ได้ โดยไม่ต้องเปิด namespace ใด ๆ แม้ได้ <code>System</code></p>
<p>บางคนให้ความเห็นว่า engineer ของ Microsoft สร้าง alias เพื่อให้คล้ายกับ C++ เพื่อให้โปรแกรมเมอร์เข้าใจได้ง่าย เป็นแนวคิดเก่า ตอนนี้ก็ควรกลับมาใช้ BCL type ซึ่งเป็น design เริ่มต้นของ C# เสียที <a href="http://stackoverflow.com/questions/7074/whats-the-difference-between-string-and-string" target="_blank" rel="external">[1]</a></p>
<p>ทำไมถึงควรใช้ BCL type ก็เนื่องจาก Api บางตัวของ .Net ใช้ชื่อเดียวกับ BCL type เช่น <code>Convert.ToSingle</code> ฟังก์ชันนี้ return ค่าเป็น Single (float) สามารถเขียนได้สองแบบ คือ</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> <span class="keyword">value</span> = Convert.ToSingle(<span class="string">"12.0"</span>)</span><br><span class="line">Single <span class="keyword">value</span> = Convert.ToSingle(<span class="string">"12.0"</span>)</span><br></pre></td></tr></table></figure>
<p>แบบแรก ต้องการ convert เป็น Single แต่กลับ return ค่าออกมาเป็น float<br>แบบที่สอง จะดูตรงไปตรงมา คือ convert เป็น Single และรับค่าด้วย Single</p>
<p>เรื่องนี้เกี่ยวกับ readability ถึงแม้โค้ดทั้งสองแบบจะทำงานเหมือนกัน แต่แบบที่สองจะเข้าใจได้ง่ายกว่า แม้กับคนที่ไม่เคยเขียน C# ก็ตาม</p>
<p>ความเห็นอีกแบบคือ ควรใช้ alias เป็นหลัก จะใช้ BCL type ก็ต่อเมื่อมีการอ้างถึงสมาชิกในคลาสเท่านั้น เพราะไม่ make sense ถ้าจะเรียกใช้ method จาก keyword ควรเรียกจาก class มากกว่า</p>
<p>จากความเห็นข้างต้น สามารถสรุป style การใช้ได้ 3 แบบ คือ</p>
<p>แบบที่ 1 ใช้ BCL ทั้งหมด</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String text;</span><br><span class="line">String.IsNullOrEmpty(text);</span><br><span class="line">Double number;</span><br><span class="line">Double.TryParse(text, <span class="keyword">out</span> number);</span><br></pre></td></tr></table></figure>
<p>แบบที่ 2 ใช้ alias ทั้งหมด</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text;</span><br><span class="line"><span class="keyword">string</span>.IsNullOrEmpty(text);</span><br><span class="line"><span class="keyword">double</span> number;</span><br><span class="line"><span class="keyword">double</span>.TryParse(text, <span class="keyword">out</span> number);</span><br></pre></td></tr></table></figure>
<p>แบบที่ 3 ใช้ alias ในประโยคประกาศตัวแปร และใช้ BCL เมื่อมีการเรียกใช้ method ใน class</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text;</span><br><span class="line">String.IsNullOrEmpty(text);</span><br><span class="line"><span class="keyword">double</span> number;</span><br><span class="line">Double.TryParse(text, <span class="keyword">out</span> number);</span><br></pre></td></tr></table></figure>
<p>Links</p>
<ol>
<li><a href="http://haacked.com/archive/2015/12/16/to-string-or-not/" target="_blank" rel="external">To String or to string.</a></li>
<li><a href="http://stackoverflow.com/questions/7074/whats-the-difference-between-string-and-string" target="_blank" rel="external">What’s the difference between String and string?.</a></li>
<li><a href="https://github.com/dotnet/corefx/issues/391" target="_blank" rel="external">Language or BCL data types.</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>ใน C# จะมี alias ที่ match กับ type ใน <a href="https://en.wikipedia.org/wiki/List_of_data_types_of_the_Standard_Libraries#Base_Class_Lib]]>
    </summary>
    
      <category term="cs" scheme="http://wk-j.gihub.io/tags/cs/"/>
    
  </entry>
  
</feed>
