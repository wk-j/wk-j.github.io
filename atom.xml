<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[wk's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://wk-j.gihub.io/"/>
  <updated>2016-01-10T14:22:10.000Z</updated>
  <id>http://wk-j.gihub.io/</id>
  
  <author>
    <name><![CDATA[wk]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ควรใช้ String ใหญ่หรือ string เล็ก]]></title>
    <link href="http://wk-j.gihub.io/2016/01/10/keyword-or-bcl/"/>
    <id>http://wk-j.gihub.io/2016/01/10/keyword-or-bcl/</id>
    <published>2016-01-10T11:11:57.000Z</published>
    <updated>2016-01-10T14:22:10.000Z</updated>
    <content type="html"><![CDATA[<p>อย่างที่ทราบกันดีว่าใน C# จะมี type alias ที่ match กับ type ใน <a href="https://en.wikipedia.org/wiki/List_of_data_types_of_the_Standard_Libraries#Base_Class_Library" target="_blank" rel="external">base class library (BCL)</a> เป็น keyword ตัวพิมพ์เล็ก เช่น System.String มี alias คือ string ทั้ง String ใหญ่และ string เล็กในทางเทคนิกแล้วสามารถใช้แทนกันได้</p>
<p>Alias ของ C# มีทั้งหมด 15 ตัว โดย map อยู่กับ BCL type ดังนี้</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>:  System.Object</span><br><span class="line"><span class="keyword">string</span>:  System.String</span><br><span class="line"><span class="keyword">bool</span>:    System.Boolean</span><br><span class="line"><span class="keyword">byte</span>:    System.Byte</span><br><span class="line"><span class="keyword">sbyte</span>:   System.SByte</span><br><span class="line"><span class="keyword">short</span>:   System.Int16</span><br><span class="line"><span class="keyword">ushort</span>:  System.UInt16</span><br><span class="line"><span class="keyword">int</span>:     System.Int32</span><br><span class="line"><span class="keyword">uint</span>:    System.UInt32</span><br><span class="line"><span class="keyword">long</span>:    System.Int64</span><br><span class="line"><span class="keyword">ulong</span>:   System.UInt64</span><br><span class="line"><span class="keyword">float</span>:   System.Single</span><br><span class="line"><span class="keyword">double</span>:  System.Double</span><br><span class="line"><span class="keyword">decimal</span>: System.Decimal</span><br><span class="line"><span class="keyword">char</span>:    System.Char</span><br></pre></td></tr></table></figure>
<p>Alias ทุกตัว คือ keyword ของภาษา ส่วน BCL Type เป็นชื่อคลาสธรรมดา</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">as</span> <span class="keyword">base</span> <span class="keyword">bool</span> <span class="keyword">break</span> <span class="keyword">byte</span> <span class="keyword">case</span> <span class="keyword">catch</span> <span class="keyword">char</span> <span class="keyword">checked</span> class <span class="keyword">const</span></span><br><span class="line"><span class="keyword">continue</span> <span class="keyword">decimal</span> <span class="keyword">default</span> <span class="keyword">delegate</span> <span class="keyword">do</span> <span class="keyword">double</span> <span class="keyword">else</span> <span class="keyword">enum</span> <span class="keyword">event</span> <span class="keyword">explicit</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">false</span> <span class="keyword">finally</span> <span class="keyword">fixed</span> <span class="keyword">float</span> <span class="keyword">for</span> <span class="keyword">foreach</span> <span class="keyword">goto</span> <span class="keyword">if</span> <span class="keyword">implicit</span> <span class="keyword">in</span></span><br><span class="line"><span class="title">in</span> (<span class="params">generic modifier</span>) <span class="keyword">int</span> <span class="keyword">interface</span> <span class="keyword">internal</span> <span class="keyword">is</span> <span class="keyword">lock</span> <span class="keyword">long</span> namespace</span><br><span class="line">new <span class="keyword">null</span> <span class="keyword">object</span> <span class="keyword">operator</span> <span class="keyword">out</span> <span class="title">out</span> (<span class="params">generic modifier</span>) <span class="keyword">override</span> <span class="keyword">params</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">protected</span> <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">ref</span> return <span class="keyword">sbyte</span> <span class="keyword">sealed</span> <span class="keyword">short</span> <span class="keyword">sizeof</span></span><br><span class="line"><span class="keyword">stackalloc</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="keyword">struct</span> <span class="keyword">switch</span> <span class="keyword">this</span> throw <span class="keyword">true</span> <span class="keyword">try</span> <span class="keyword">typeof</span> <span class="keyword">uint</span></span><br><span class="line"><span class="keyword">ulong</span> <span class="keyword">unchecked</span> <span class="keyword">unsafe</span> <span class="keyword">ushort</span> <span class="keyword">using</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="keyword">volatile</span> <span class="keyword">while</span></span></span><br></pre></td></tr></table></figure>
<p>ใน <a href="https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md" target="_blank" rel="external">C# coding style</a> ของทีม corefx บอกว่าพวกเขาใช้ alias ทั้งหมดทุกกรณี เหตุผลอย่างหนึ่งคือ alias เป็น keyword ประโยชน์ที่ได้จากมันก็คือ สามารถเรียกใช้เมื่อไหร่ก็ได้ โดยไม่ต้องเปิด namespace ด้วยคำสั่ง <code>using System</code></p>
<p>บางคนให้ความเห็นว่า engineer ของ Microsoft สร้าง alias เพื่อให้คล้ายกับ C++ เพื่อให้โปรแกรมเมอร์เข้าใจได้ง่าย เป็นแนวคิดเก่า ตอนนี้ก็ควรกลับมาใช้ BCL type ซึ่งเป็น design เริ่มต้นของ C# เสียที <a href="http://stackoverflow.com/questions/7074/whats-the-difference-between-string-and-string" target="_blank" rel="external">[1]</a></p>
<p>ความเห็นอีกแบบคือ ควรใช้ alias เป็นหลัก จะใช้ BCL type ก็ต่อเมื่อมีการอ้างถึงสมาชิกในคลาสเท่านั้น เพราะไม่ make sense ถ้าจะเรียกใช้ method จาก keyword ควรเรียกจาก class มากกว่า</p>
<p>จากความเห็นข้างต้น สามารถสรุป style การใช้ได้ 3 แบบ คือ</p>
<p>แบบที่ 1 ใช้ BCL ทั้งหมด</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String text;</span><br><span class="line">String.IsNullOrEmpty(text);</span><br><span class="line">Double number;</span><br><span class="line">Double.TryParse(text, <span class="keyword">out</span> number);</span><br></pre></td></tr></table></figure>
<p>แบบที่ 2 ใช้ alias ทั้งหมด</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text;</span><br><span class="line"><span class="keyword">string</span>.IsNullOrEmpty(text);</span><br><span class="line"><span class="keyword">double</span> number;</span><br><span class="line"><span class="keyword">double</span>.TryParse(text, <span class="keyword">out</span> number);</span><br></pre></td></tr></table></figure>
<p>แบบที่ 3 ใช้ alias ในประโยคประกาศตัวแปร และใช้ BCL เมื่อมีการเรียกใช้ method ใน class</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text;</span><br><span class="line">String.IsNullOrEmpty(text);</span><br><span class="line"><span class="keyword">double</span> number;</span><br><span class="line">Double.TryParse(text, <span class="keyword">out</span> number);</span><br></pre></td></tr></table></figure>
<p>สำหรับผม ผมใช้แบบที่ 2 คือ ใช้ alias ทั้งหมด เนื่องจาก ReSharper ที่ใช้สำหรับ refactor โค้ดปัจจุบันใช้ style เดียวกับทีม corefx คือ มันจะ hint ให้เปลี่ยนเป็น alias ทั้งหมดทุกกรณี</p>
<p>Links</p>
<ol>
<li><a href="http://haacked.com/archive/2015/12/16/to-string-or-not/" target="_blank" rel="external">To String or to string.</a></li>
<li><a href="http://stackoverflow.com/questions/7074/whats-the-difference-between-string-and-string" target="_blank" rel="external">What’s the difference between String and string?.</a></li>
<li><a href="https://github.com/dotnet/corefx/issues/391" target="_blank" rel="external">Language or BCL data types.</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>อย่างที่ทราบกันดีว่าใน C# จะมี type alias ที่ match กับ type ใน <a href="https://en.wikipedia.org/wiki/List_of_data_types_of_the_Standard]]>
    </summary>
    
      <category term="cs" scheme="http://wk-j.gihub.io/tags/cs/"/>
    
  </entry>
  
</feed>
